variables:
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CLIENT_TIMEOUT: 600
  COMPOSE_HTTP_TIMEOUT: 600
  DOCKER_BUILDKIT: 0
  COMPOSE_DOCKER_CLI_BUILD: 0
  SECRET_KEY: "45cf93c4d41348cd9980674ade9a7356"

stages:
  - build
  - test
  - security_scan
  - dependency_scan
  - zap_scan  
  - deploy
  - monitor

# Job de build da imagem Docker
build_job:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - echo "Building Docker image..."
    - docker build -t frankstark/todo-flask .
  only:
    - main

# Job de testes
test_job:
  stage: test
  image: python:3.10-slim
  before_script:
    - echo "Setting up environment for tests..."
    - pip3 install -r requirements.txt
    - pip3 install pytest pytest-cov
  needs:
    - build_job
  script:
    - echo "Running Flask app tests..."
    - pytest --cov=todo_project --cov-report=xml
  artifacts:
    paths:
      - coverage.xml
    expire_in: 1 week
  only:
    - main

# Job de análise de segurança com Bandit
security_scan:
  stage: security_scan
  image: python:3.10-slim
  before_script:
    - echo "Setting up environment for security scan..."
    - pip install bandit
  needs:
    - build_job
  script:
    - echo "Running Bandit security scan..."
    - bandit -r todo_project --severity-level high
  artifacts:
    paths:
      - bandit-report.txt
    expire_in: 1 week
  only:
    - main

# Job de análise de dependências com OWASP Dependency-Check
dependency_scan:
  stage: dependency_scan
  image: owasp/dependency-check:latest
  needs:
    - build_job
  script:
    - echo "Running OWASP Dependency-Check..."
    - dependency-check --project "todo_project" --scan . --format "XML" --out dependency-check-report.xml --scan /path/to/requirements.txt
  artifacts:
    paths:
      - dependency-check-report.xml
    expire_in: 1 week
  only:
    - main

# Job de análise de segurança com ZAP
zap_scan:
  stage: zap_scan
  image: docker:20.10.16  # Imagem Docker para Docker-in-Docker
  services:
    - docker:20.10.16-dind  # Docker-in-Docker para execução de containers
  variables:
    DOCKER_DRIVER: overlay2  # Configuração para o Docker-in-Docker
  before_script:
    # Criação da rede Docker para o ZAP e a aplicação
    - docker network create zap_network || true

    # Rodar a aplicação Flask
    - docker run -d --name flask-app --network zap_network -p 5000:5000 frankstark/todo-flask:latest
  script:
    # Rodar o ZAP e realizar a análise de segurança
    - docker run --rm --network zap_network -v $(pwd)/zap-config.conf:/zap/wrk/zap-config.conf ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t http://flask-app:5000 -c /zap/wrk/zap-config.conf -J /zap/wrk/zap_report.json || true
    
    # Analisar o relatório JSON, mas não fazer o pipeline falhar
    - jq '.alerts | length' /zap/wrk/zap_report.json || true
    - ALERTS_COUNT=$(jq '.alerts | length' /zap/wrk/zap_report.json || echo "0")
    - echo "Number of alerts found:" $ALERTS_COUNT

    # Aqui você pode decidir o que fazer com o resultado, como enviar uma notificação, mas não falhar o pipeline
  artifacts:
    paths:
      - zap_report.json
    expire_in: 1 week
  only:
    - main
  needs:
    - build_job

# Job de deploy
deploy_job:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  needs:
    - build_job
    - test_job
    - security_scan
    - dependency_scan
    - zap_scan    
  before_script:
    - echo "Stopping previous container if exists..."
    - PORT_CONTAINERS=$(docker ps --filter "publish=5000" -q)
    - echo $PORT_CONTAINERS
    - if [ -n "$PORT_CONTAINERS" ]; then
        docker stop $PORT_CONTAINERS;
        docker rm $PORT_CONTAINERS;
        sleep 5;
      fi
  script:
    - echo "Deploying the app..."
    - docker run -d -p 5000:5000 frankstark/todo-flask:latest
  only:
    - main

# Job de monitoramento com Prometheus e Grafana
monitoring_job:
  stage: monitor
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  needs:
    - deploy_job
  before_script:
    - echo "Starting Prometheus and Grafana..."
    - docker network create monitor_network
  script:
    # Start Prometheus
    - docker run -d --name prometheus --network monitor_network -p 9090:9090 -v $(pwd)/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus:latest
    # Start Grafana
    - docker run -d --name grafana --network monitor_network -p 3000:3000 grafana/grafana:latest
    - sleep 10    
  only:
    - main

