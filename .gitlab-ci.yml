variables:
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_CLIENT_TIMEOUT: 600
  COMPOSE_HTTP_TIMEOUT: 600
  DOCKER_BUILDKIT: 0
  COMPOSE_DOCKER_CLI_BUILD: 0
  PYTHONPATH: "$CI_PROJECT_DIR/todo_project"
  SECRET_KEY: "45cf93c4d41348cd9980674ade9a7356"

stages:
  - build
  - test
  - security_scan
  - dependency_scan
  - zap_scan
  - deploy

# Job de build da imagem Docker
build_job:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - echo "Building Docker image..."
    - docker build -t frankstark/todo-flask .
  only:
    - main

# Job de testes
test_job:
  stage: test
  image: python:3.10-slim
  before_script:
    - echo "Setting up environment for tests..."
    - pip3 install -r requirements.txt
    - pip3 install pytest pytest-cov
  script:
    - echo "Running Flask app tests..."
    - pytest --cov=todo_project --cov-report=xml
  artifacts:
    paths:
      - coverage.xml
    expire_in: 1 week
  only:
    - main

# Job de análise de segurança com Bandit
security_scan:
  stage: security_scan
  image: python:3.10-slim
  before_script:
    - echo "Setting up environment for security scan..."
    - pip install bandit
  script:
    - echo "Running Bandit security scan..."
    - bandit -r todo_project --severity-level high  # Somente falhar em vulnerabilidades de alta gravidade
  artifacts:
    paths:
      - bandit-report.txt
    expire_in: 1 week
  only:
    - main

# Job de análise de dependências com OWASP Dependency-Check
dependency_scan:
  stage: dependency_scan
  image: owasp/dependency-check:latest
  script:
    - echo "Running OWASP Dependency-Check..."
    - dependency-check --project "todo_project" --scan . --format "XML" --out dependency-check-report.xml --scan /path/to/requirements.txt
  artifacts:
    paths:
      - dependency-check-report.xml
    expire_in: 1 week
  only:
    - main

zap_scan:
  stage: zap_scan
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - echo "Starting Flask app..."
    - docker network create zap_network
    - docker run -d --name flask-app --network zap_network -p 5000:5000 frankstark/todo-flask:latest
    - docker run --network zap_network -t ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t http://flask-app:5000    
  artifacts:
    paths:
      - owasp-zap-report.html
    expire_in: 1 week
  only:
    - main


# Job de deploy
deploy_job:
  stage: deploy
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  before_script:
    - echo "Stopping previous container if exists..."
    - PORT_CONTAINERS=$(docker ps --filter "publish=5000" -q)
    - echo $PORT_CONTAINERS
    - if [ -n "$PORT_CONTAINERS" ]; then
        docker stop $PORT_CONTAINERS;
        docker rm $PORT_CONTAINERS;
        sleep 5;
      fi
  script:
    - echo "Deploying the app..."
    - docker run -d -p 5000:5000 frankstark/todo-flask:latest
  only:
    - main
