name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker BuildKit
        run: |
          echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV
          echo "COMPOSE_DOCKER_CLI_BUILD=1" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t frankstark/todo-flask .

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov

      - name: Run tests
        run: |
          pytest --cov=todo_project --cov-report=xml
        continue-on-error: true

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage.xml

  security_scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10

      - name: Install Bandit
        run: |
          pip install bandit

      - name: Run security scan
        run: |
          bandit -r todo_project --severity-level high
        continue-on-error: true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v3
        with:
          name: bandit-report
          path: bandit-report.txt

  dependency_scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run OWASP Dependency-Check
        uses: owasp/dependency-check-action@v2
        with:
          project: todo_project
          path: .
          format: XML
          out: dependency-check-report.xml
        continue-on-error: true

      - name: Upload Dependency-Check report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: dependency-check-report.xml

  zap_scan:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Create Docker network
        run: |
          docker network create zap_network || true

      - name: Run Flask app
        run: |
          docker run -d --name flask-app --network zap_network -p 5000:5000 frankstark/todo-flask:latest

      - name: Run ZAP Baseline scan
        run: |
          docker run --rm --network zap_network -v ${{ github.workspace }}/zap-config.conf:/zap/wrk/zap-config.conf ghcr.io/zaproxy/zaproxy:stable zap-baseline.py -t http://flask-app:5000 -c /zap/wrk/zap-config.conf -J /zap/wrk/zap_report.json || true

      - name: Upload ZAP report
        uses: actions/upload-artifact@v3
        with:
          name: zap-report
          path: zap_report.json

  deploy:
    runs-on: ubuntu-latest
    needs: [build, test, security_scan, dependency_scan, zap_scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Stop and remove existing container
        run: |
          CONTAINER_ID=$(docker ps -q -f "publish=5000")
          if [ -n "$CONTAINER_ID" ]; then
            docker stop $CONTAINER_ID
            docker rm $CONTAINER_ID
            sleep 5
          fi

      - name: Deploy Docker container
        run: |
          docker run -d -p 5000:5000 frankstark/todo-flask:latest

  monitor:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Create Docker network
        run: |
          docker network create monitor_network || true

      - name: Start Prometheus and Grafana
        run: |
          docker run -d --name prometheus --network monitor_network -p 9090:9090 -v ${{ github.workspace }}/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheus:latest
          docker run -d --name grafana --network monitor_network -p 3000:3000 grafana/grafana:latest
          sleep 10
